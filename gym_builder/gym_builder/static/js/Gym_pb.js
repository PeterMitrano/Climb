/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Gym', null, global);
goog.exportSymbol('proto.Gyms', null, global);
goog.exportSymbol('proto.Point2D', null, global);
goog.exportSymbol('proto.Polygon', null, global);
goog.exportSymbol('proto.Route', null, global);
goog.exportSymbol('proto.Wall', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Gyms = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Gyms.repeatedFields_, null);
};
goog.inherits(proto.Gyms, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Gyms.displayName = 'proto.Gyms';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Gyms.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Gyms.prototype.toObject = function(opt_includeInstance) {
  return proto.Gyms.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Gyms} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Gyms.toObject = function(includeInstance, msg) {
  var f, obj = {
    gymsList: jspb.Message.toObjectList(msg.getGymsList(),
    proto.Gym.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Gyms}
 */
proto.Gyms.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Gyms;
  return proto.Gyms.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Gyms} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Gyms}
 */
proto.Gyms.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Gym;
      reader.readMessage(value,proto.Gym.deserializeBinaryFromReader);
      msg.getGymsList().push(value);
      msg.setGymsList(msg.getGymsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Gyms} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Gyms.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Gyms.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Gyms.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGymsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Gym.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Gyms} The clone.
 */
proto.Gyms.prototype.cloneMessage = function() {
  return /** @type {!proto.Gyms} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Gym gyms = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Gym>}
 */
proto.Gyms.prototype.getGymsList = function() {
  return /** @type{!Array.<!proto.Gym>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Gym, 1));
};


/** @param {Array.<!proto.Gym>} value  */
proto.Gyms.prototype.setGymsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.Gyms.prototype.clearGymsList = function() {
  this.setGymsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Gym = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Gym.repeatedFields_, null);
};
goog.inherits(proto.Gym, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Gym.displayName = 'proto.Gym';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Gym.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Gym.prototype.toObject = function(opt_includeInstance) {
  return proto.Gym.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Gym} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Gym.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    wallsList: jspb.Message.toObjectList(msg.getWallsList(),
    proto.Wall.toObject, includeInstance),
    largeIconUrl: msg.getLargeIconUrl(),
    width: msg.getWidth(),
    height: msg.getHeight()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Gym}
 */
proto.Gym.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Gym;
  return proto.Gym.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Gym} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Gym}
 */
proto.Gym.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Wall;
      reader.readMessage(value,proto.Wall.deserializeBinaryFromReader);
      msg.getWallsList().push(value);
      msg.setWallsList(msg.getWallsList());
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLargeIconUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Gym} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Gym.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Gym.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Gym.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getWallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Wall.serializeBinaryToWriter
    );
  }
  f = this.getLargeIconUrl();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Gym} The clone.
 */
proto.Gym.prototype.cloneMessage = function() {
  return /** @type {!proto.Gym} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Gym.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Gym.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated Wall walls = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Wall>}
 */
proto.Gym.prototype.getWallsList = function() {
  return /** @type{!Array.<!proto.Wall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Wall, 2));
};


/** @param {Array.<!proto.Wall>} value  */
proto.Gym.prototype.setWallsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.Gym.prototype.clearWallsList = function() {
  this.setWallsList([]);
};


/**
 * optional string large_icon_url = 4;
 * @return {string}
 */
proto.Gym.prototype.getLargeIconUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Gym.prototype.setLargeIconUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float width = 5;
 * @return {number}
 */
proto.Gym.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.Gym.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float height = 6;
 * @return {number}
 */
proto.Gym.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.Gym.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Wall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Wall.repeatedFields_, null);
};
goog.inherits(proto.Wall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Wall.displayName = 'proto.Wall';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Wall.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Wall.prototype.toObject = function(opt_includeInstance) {
  return proto.Wall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Wall} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Wall.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    polygon: (f = msg.getPolygon()) && proto.Polygon.toObject(includeInstance, f),
    routesList: jspb.Message.toObjectList(msg.getRoutesList(),
    proto.Route.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Wall}
 */
proto.Wall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Wall;
  return proto.Wall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Wall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Wall}
 */
proto.Wall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Polygon;
      reader.readMessage(value,proto.Polygon.deserializeBinaryFromReader);
      msg.setPolygon(value);
      break;
    case 3:
      var value = new proto.Route;
      reader.readMessage(value,proto.Route.deserializeBinaryFromReader);
      msg.getRoutesList().push(value);
      msg.setRoutesList(msg.getRoutesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Wall} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Wall.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Wall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Wall.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPolygon();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Polygon.serializeBinaryToWriter
    );
  }
  f = this.getRoutesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Route.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Wall} The clone.
 */
proto.Wall.prototype.cloneMessage = function() {
  return /** @type {!proto.Wall} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Wall.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Wall.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Polygon polygon = 2;
 * @return {proto.Polygon}
 */
proto.Wall.prototype.getPolygon = function() {
  return /** @type{proto.Polygon} */ (
    jspb.Message.getWrapperField(this, proto.Polygon, 2));
};


/** @param {proto.Polygon|undefined} value  */
proto.Wall.prototype.setPolygon = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Wall.prototype.clearPolygon = function() {
  this.setPolygon(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Wall.prototype.hasPolygon = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated Route routes = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Route>}
 */
proto.Wall.prototype.getRoutesList = function() {
  return /** @type{!Array.<!proto.Route>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Route, 3));
};


/** @param {Array.<!proto.Route>} value  */
proto.Wall.prototype.setRoutesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


proto.Wall.prototype.clearRoutesList = function() {
  this.setRoutesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Polygon.repeatedFields_, null);
};
goog.inherits(proto.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Polygon.displayName = 'proto.Polygon';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Polygon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Polygon} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
    pointsList: jspb.Message.toObjectList(msg.getPointsList(),
    proto.Point2D.toObject, includeInstance),
    colorCode: msg.getColorCode()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Polygon}
 */
proto.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Polygon;
  return proto.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Polygon}
 */
proto.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Point2D;
      reader.readMessage(value,proto.Point2D.deserializeBinaryFromReader);
      msg.getPointsList().push(value);
      msg.setPointsList(msg.getPointsList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setColorCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Polygon.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Polygon.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPointsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Point2D.serializeBinaryToWriter
    );
  }
  f = this.getColorCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Polygon} The clone.
 */
proto.Polygon.prototype.cloneMessage = function() {
  return /** @type {!proto.Polygon} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Point2D points = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Point2D>}
 */
proto.Polygon.prototype.getPointsList = function() {
  return /** @type{!Array.<!proto.Point2D>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Point2D, 1));
};


/** @param {Array.<!proto.Point2D>} value  */
proto.Polygon.prototype.setPointsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.Polygon.prototype.clearPointsList = function() {
  this.setPointsList([]);
};


/**
 * optional string color_code = 2;
 * @return {string}
 */
proto.Polygon.prototype.getColorCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Polygon.prototype.setColorCode = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Route = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Route, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Route.displayName = 'proto.Route';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Route.prototype.toObject = function(opt_includeInstance) {
  return proto.Route.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Route} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Route.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    position: (f = msg.getPosition()) && proto.Point2D.toObject(includeInstance, f),
    grade: msg.getGrade()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Route}
 */
proto.Route.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Route;
  return proto.Route.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Route} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Route}
 */
proto.Route.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Point2D;
      reader.readMessage(value,proto.Point2D.deserializeBinaryFromReader);
      msg.setPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGrade(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Route} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Route.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Route.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Route.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPosition();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Point2D.serializeBinaryToWriter
    );
  }
  f = this.getGrade();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Route} The clone.
 */
proto.Route.prototype.cloneMessage = function() {
  return /** @type {!proto.Route} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Route.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Route.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Point2D position = 2;
 * @return {proto.Point2D}
 */
proto.Route.prototype.getPosition = function() {
  return /** @type{proto.Point2D} */ (
    jspb.Message.getWrapperField(this, proto.Point2D, 2));
};


/** @param {proto.Point2D|undefined} value  */
proto.Route.prototype.setPosition = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Route.prototype.clearPosition = function() {
  this.setPosition(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Route.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 grade = 3;
 * @return {number}
 */
proto.Route.prototype.getGrade = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.Route.prototype.setGrade = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Point2D = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Point2D, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Point2D.displayName = 'proto.Point2D';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Point2D.prototype.toObject = function(opt_includeInstance) {
  return proto.Point2D.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Point2D} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Point2D.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: msg.getX(),
    y: msg.getY()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Point2D}
 */
proto.Point2D.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Point2D;
  return proto.Point2D.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Point2D} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Point2D}
 */
proto.Point2D.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Point2D} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Point2D.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Point2D.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Point2D.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = this.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Point2D} The clone.
 */
proto.Point2D.prototype.cloneMessage = function() {
  return /** @type {!proto.Point2D} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Point2D.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Point2D.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Point2D.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.Point2D.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


goog.object.extend(exports, proto);
